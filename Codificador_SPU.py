# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CodificadorSPU
                                 A QGIS plugin
 Codficador de dados
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-08
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Bruno Mian Silva
        email                : brunomian5@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import *
from qgis.core import QgsMessageLog
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Codificador_SPU_dialog import CodificadorSPUDialog
import os.path
import processing
import sys, os
import re
from osgeo import ogr


class CodificadorSPU:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CodificadorSPU_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CodificadorSPU')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CodificadorSPU', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/Codificador_SPU/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Codificador_SPU'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CodificadorSPU'),
                action)
            self.iface.removeToolBarIcon(action)

    '''def carregaVetor(self):
        """Preenche o combox com as layers vetoriais existentes no projeto"""
        self.dlg.comboBox.clear()
        lista_layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        lista_layer_vetor = []
        for layer in lista_layers:
            if layer.type() == QgsMapLayer.VectorLayer:
               lista_layer_vetor.append(layer.name())'''
 
    def abrirVetor(self):
        """abre a janela de dialógo para abrir uma layer a ser aplicada o buffer"""
        camada_abrir = str(QFileDialog.getOpenFileName(caption="Escolha a camada...",
        filter="Shapefiles (*.shp)")[0])
        #se camada_abrir não for vazio
        if (camada_abrir != ""):
            self.iface.addVectorLayer(camada_abrir, str.split(os.path.basename(camada_abrir),".") [0],"ogr")

    '''def camadaEnt(self):
        """Obter a layer definida no combobox"""
        layer = None
        nomecamada = self.dlg.comboBox.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == nomecamada:
                layer = lyr
                break
        return layer
	
    def carregaFeature(self):
        """Preenche o combox com as layers vetoriais existentes no projeto"""
        self.dlg.comboBox_2.clear()
        selectedLayerIndex = self.dlg.comboBox.currentIndex() - 1
        if selectedLayerIndex >= 0:
            layers = [layer.layer() for layer in QgsProject.instance().mapLayers().values()]
            selectedLayer = layers[selectedLayerIndex]
            fields_names = [field.name() for field in selectedLayer.pendingFields()]
            self.dlg.comboBox_2.addItems(fields)'''

    '''def definirSaida(self): 
        """abre a janela de dialógo para definir o nome e o local da layer a ser gerada""" 
        camada_salvar = str(QFileDialog.getSaveFileName(caption="Defina a layer de saída...", filter="Shapefiles (*.shp)")[0])self.dlg.lineEdit.setText(camada_salvar)'''

    #def variaveis(self):
    #    self.saida = self.dlg.lineEdit.text()

    def codificaPM(self):
        layer = self.dlg.mMapLayerComboBox_2.currentLayer()
        nameCol = self.dlg.lineEdit_2.text()
        layer.startEditing()
        features = str(self.dlg.mFieldComboBox_2.currentText())
        if layer.dataProvider().fieldNameIndex(nameCol) == -1:
            layer.dataProvider().addAttributes([QgsField(nameCol, QVariant.String)])
            layer.updateFields()
        id_new_col = layer.dataProvider().fieldNameIndex(nameCol)

        for feature in layer.getFeatures():
            area = re.sub("[^0-9]", "",(str(feature[features])))
            area = area[0:11]
            layer.changeAttributeValue(feature.id(), id_new_col, area)
        layer.commitChanges()

    def codificaVV(self):
        layer = self.dlg.mMapLayerComboBox.currentLayer()
        nameCol = self.dlg.lineEdit.text()
        layer.startEditing()
        features = str(self.dlg.mFieldComboBox.currentText())
        if layer.dataProvider().fieldNameIndex(nameCol) == -1:
            layer.dataProvider().addAttributes([QgsField(nameCol, QVariant.String)])
            layer.updateFields()
        id_new_col = layer.dataProvider().fieldNameIndex(nameCol)
        for feature in layer.getFeatures():
            area = re.sub("[^0-9]", "",(str(feature[features])))
            if len(area) == 12:
                area = area[0:11]
                if area[0]!='0':
                    area = ('0' + area)
            elif len(area) == 13:
                area = area[0:10]
                if area[0]!='0':
                    area = ('0' + area)
            elif len(area) == 14:
                if area[0]!='0':
                    area = area[0:6] + area[7:] 
                    area = area[0:10]
                    area = '0' + area
                else:
                    area = area[0:11]
            elif len(area) == 15:
                if area[0]!='0':
                    area = area[0:5] + area[6] + area[8:] 
                    area = area[0:10]
                    area = ('0' + area)
                else:
                    area = area[0:7] + area[8:] 
                    area = area[0:11]
            elif area is '':
                area = NULL
            layer.changeAttributeValue(feature.id(), id_new_col, area)
        layer.commitChanges()

    def codificaVix(self):
        layer = self.dlg.mMapLayerComboBox.currentLayer()
        nameCol = self.dlg.lineEdit.text()
        layer.startEditing()
        features = str(self.dlg.mFieldComboBox.currentText())
        if layer.dataProvider().fieldNameIndex(nameCol) == -1:
            layer.dataProvider().addAttributes([QgsField(nameCol, QVariant.String)])
            layer.updateFields()
        id_new_col = layer.dataProvider().fieldNameIndex(nameCol)

        for feature in layer.getFeatures():
            area = re.sub("[^0-9]", "",(str(feature[features])))
            area = area[0:11]
            layer.changeAttributeValue(feature.id(), id_new_col, area)
        layer.commitChanges()

    def escolha(self):
        if self.dlg.checkBoxVV.isChecked():
           self.codificaVV()
        elif self.dlg.checkBoxVix.isChecked():
           self.codificaVix()

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        self.dlg = CodificadorSPUDialog()
        # show the dialog
        self.dlg.toolButton.clicked.connect(self.abrirVetor)
        self.dlg.mMapLayerComboBox.layerChanged['QgsMapLayer*'].connect(self.dlg.mFieldComboBox.setLayer)
        self.dlg.mMapLayerComboBox_2.layerChanged['QgsMapLayer*'].connect(self.dlg.mFieldComboBox_2.setLayer)
        self.dlg.pushButton_2.clicked.connect(self.codificaPM)
        self.dlg.pushButton.clicked.connect(self.escolha)
        QgsMessageLog.logMessage("message")
        self.dlg.show()
        # See if OK was pressed
        #adicionando as funções criadas
        pass
